import { chromium } from 'playwright';
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);

async function fixedCrawler() {
    console.log('üîß ÏàòÏ†ïÎêú ÌÅ¨Î°§Îü¨ ÏãúÏûë...\n');
    
    const browser = await chromium.launch({ 
        headless: false,  // Î¨∏Ï†ú ÌôïÏù∏ÏùÑ ÏúÑÌï¥ Î∏åÎùºÏö∞Ï†Ä ÌëúÏãú
        slowMo: 500      // ÎèôÏûëÏùÑ ÎäêÎ¶¨Í≤å Ìï¥ÏÑú Í¥ÄÏ∞∞
    });
    
    try {
        const page = await browser.newPage();
        
        // 1. Î°úÍ∑∏Ïù∏
        console.log('1Ô∏è‚É£ ÎÑ§Ïù¥Î≤Ñ Î°úÍ∑∏Ïù∏...');
        await page.goto('https://nid.naver.com/nidlogin.login');
        await page.fill('#id', process.env.NAVER_ID);
        await page.fill('#pw', process.env.NAVER_PASSWORD);
        await page.click('.btn_login');
        await page.waitForNavigation();
        console.log('‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ\n');
        
        // 2. Ïπ¥Ìéò Ï†ëÏÜç (Ïò¨Î∞îÎ•∏ URL ÏÇ¨Ïö©)
        console.log('2Ô∏è‚É£ Ïπ¥Ìéò Ï†ëÏÜç...');
        await page.goto('https://cafe.naver.com/jaegebal');
        await page.waitForTimeout(3000);
        
        // 3. iframe Ï∞æÍ∏∞ Î∞è ÏïàÏ†ïÌôî ÎåÄÍ∏∞
        console.log('3Ô∏è‚É£ iframe Î°úÎìú ÎåÄÍ∏∞...');
        const frameElement = await page.waitForSelector('iframe#cafe_main');
        const frame = await frameElement.contentFrame();
        
        if (!frame) {
            throw new Error('iframeÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
        }
        
        // 4. ÌòÑÏû¨ ÏÉÅÌÉú ÌôïÏù∏
        const currentUrl = frame.url();
        console.log(`ÌòÑÏû¨ Frame URL: ${currentUrl}\n`);
        
        // 5. Í≤åÏãúÌåê Ïù¥Îèô Î∞©Î≤ï Í∞úÏÑ† - ÏßÅÏ†ë URL ÏÇ¨Ïö©
        console.log('4Ô∏è‚É£ Í≤åÏãúÌåêÏúºÎ°ú Ïù¥Îèô...');
        
        // Î∞©Î≤ï 1: frame ÎÇ¥ÏóêÏÑú ÏßÅÏ†ë ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò
        try {
            await frame.goto('/ArticleList.nhn?search.clubid=12730407&search.menuid=84&search.boardtype=L');
            await page.waitForTimeout(3000);
            console.log('‚úÖ Í≤åÏãúÌåê Ïù¥Îèô ÏÑ±Í≥µ\n');
        } catch (e) {
            console.log('‚ö†Ô∏è  ÏßÅÏ†ë Ïù¥Îèô Ïã§Ìå®, ÎßÅÌÅ¨ ÌÅ¥Î¶≠ ÏãúÎèÑ...');
            
            // Î∞©Î≤ï 2: Î©îÎâ¥ ÎßÅÌÅ¨ ÌÅ¥Î¶≠
            const menuLink = await frame.$('a[href*="menuid=84"]');
            if (menuLink) {
                await menuLink.click();
                await page.waitForTimeout(3000);
            }
        }
        
        // 6. Í≤åÏãúÍ∏Ä Ï∂îÏ∂ú (frameÏù¥ Ïó¨Ï†ÑÌûà Ïú†Ìö®ÌïúÏßÄ ÌôïÏù∏)
        console.log('5Ô∏è‚É£ Í≤åÏãúÍ∏Ä Ï∂îÏ∂ú...');
        
        // frame Ïû¨ÌöçÎìù (detached Î∞©ÏßÄ)
        const newFrameElement = await page.waitForSelector('iframe#cafe_main');
        const newFrame = await newFrameElement.contentFrame();
        
        const posts = await newFrame.evaluate(() => {
            const results = [];
            const rows = document.querySelectorAll('.article-board tbody tr');
            
            for (let i = 0; i < Math.min(rows.length, 5); i++) {
                const row = rows[i];
                
                // Í∞Å ÏöîÏÜå Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
                const titleEl = row.querySelector('.td_article .article');
                const authorEl = row.querySelector('.td_name');
                const dateEl = row.querySelector('.td_date');
                
                if (titleEl) {
                    // ÏûëÏÑ±Ïûê Ï∂îÏ∂ú Í∞úÏÑ†
                    let author = 'Unknown';
                    if (authorEl) {
                        // Î™®Îì† ÌÖçÏä§Ìä∏ ÎÖ∏Îìú ÏàòÏßë
                        const authorText = authorEl.textContent.trim();
                        // a ÌÉúÍ∑∏ ÎÇ¥Î∂Ä ÌÖçÏä§Ìä∏ Ïö∞ÏÑ†
                        const authorLink = authorEl.querySelector('a');
                        author = authorLink ? authorLink.textContent.trim() : authorText;
                    }
                    
                    results.push({
                        title: titleEl.textContent.trim(),
                        author: author,
                        date: dateEl ? dateEl.textContent.trim() : '',
                        href: titleEl.getAttribute('href'),
                        // ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥
                        debug: {
                            hasTitle: !!titleEl,
                            hasAuthor: !!authorEl,
                            hasDate: !!dateEl,
                            authorHTML: authorEl ? authorEl.innerHTML : ''
                        }
                    });
                }
            }
            
            return results;
        });
        
        console.log(`\n‚úÖ ${posts.length}Í∞ú Í≤åÏãúÍ∏Ä Ï∂îÏ∂úÎê®:`);
        posts.forEach((post, i) => {
            console.log(`${i+1}. ${post.title}`);
            console.log(`   ÏûëÏÑ±Ïûê: ${post.author} | ÎÇ†Ïßú: ${post.date}`);
            console.log(`   ÎîîÎ≤ÑÍ∑∏:`, post.debug);
        });
        
        // 7. Ï≤´ Î≤àÏß∏ Í≤åÏãúÍ∏Ä ÎÇ¥Ïö© ÌÖåÏä§Ìä∏
        if (posts.length > 0 && posts[0].href) {
            console.log('\n6Ô∏è‚É£ Í≤åÏãúÍ∏Ä ÎÇ¥Ïö© Ï∂îÏ∂ú ÌÖåÏä§Ìä∏...');
            
            // ÏÉà ÌÉ≠ÏóêÏÑú Ïó¥Í∏∞ (frame detached Î∞©ÏßÄ)
            const newPage = await browser.newPage();
            await newPage.goto(`https://cafe.naver.com/jaegebal${posts[0].href}`);
            await newPage.waitForTimeout(2000);
            
            const contentFrame = await newPage.waitForSelector('iframe#cafe_main');
            const cFrame = await contentFrame.contentFrame();
            
            const content = await cFrame.evaluate(() => {
                const selectors = ['.se-main-container', '.ContentRenderer', '#postViewArea'];
                for (const sel of selectors) {
                    const el = document.querySelector(sel);
                    if (el) return el.textContent.substring(0, 200) + '...';
                }
                return 'ÎÇ¥Ïö©ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå';
            });
            
            console.log(`ÎÇ¥Ïö© ÎØ∏Î¶¨Î≥¥Í∏∞: ${content}`);
            await newPage.close();
        }
        
        console.log('\nÎ∂ÑÏÑù ÏôÑÎ£å! Î∏åÎùºÏö∞Ï†ÄÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî. EnterÎ•º ÎàÑÎ•¥Î©¥ Ï¢ÖÎ£åÎê©ÎãàÎã§...');
        await new Promise(resolve => process.stdin.once('data', resolve));
        
    } catch (error) {
        console.error('‚ùå Ïò§Î•ò:', error);
    } finally {
        await browser.close();
    }
}

fixedCrawler();